#include<stdio.h>
#include<map>
#include<string>
#include<algorithm>
#include<iostream>
using namespace std;
int total_cities, total_element, subLoyalty,total_time,arrow_attack;
int ielement[5];
int iattack[5];
int element[22], flag[22], succession[22];
int mytime;
const int DRAGON = 0, NINJA = 1, ICEMAN = 2, LION = 3, WOLF = 4;
const char* warriorType[5] = { "dragon", "ninja", "iceman", "lion", "wolf" };
const int createRank[2][5] = { ICEMAN, LION, WOLF, NINJA, DRAGON,
								  LION, DRAGON, NINJA, ICEMAN, WOLF };
const int SWORD = 0, BOMB = 1, ARROW = 2;
const char* weaponType[3] = { "sword", "bomb", "arrow" };
map <float, string> finalOutput;
map <float, string>::iterator itor;
void output();
class Warrior {
public:
	bool isRed;
	int element;
	int life_status;
	int attack;
	int name;
	bool haveweapon[3];
	int weaponPower[3];
	float trait;
	int ID;
	int award;
	Warrior() { award = 0; }
	void equip(bool w[3]) {
		for (int i = 0; i < 3; i++)
		{
			haveweapon[i] = w[i];
			if (w[i]) {
				switch (i) {
				case SWORD:
					weaponPower[i] = attack / 5;
					if (!weaponPower[i])haveweapon[i] = false;
					break;
				case ARROW:
					weaponPower[i] = 3;
				}
			}
		}
	}
};
Warrior*** cities;
class Warcraft {
public:
	bool isRed;
	int lastCreate;
	int element;
	int num;
	int occupy;
	int win;
	Warrior* new_born;
	Warcraft(bool Red):isRed(Red),lastCreate(0),num(0),element(total_element),occupy(0),win(0){}
	void renew() {
		lastCreate = 0;
		num = 0;
		element = 0;
		occupy = 0;
		win = 0;
	}
	void create() {
		int warrior = createRank[isRed ? 0 : 1][lastCreate];
		if (element >= ielement[warrior]) {
			element -= ielement[warrior];//消耗生命元
			//printf("test:%d elements\n", element);
			num++;
			if (isRed) printf("%03d:00 red ", mytime);
			else printf("%03d:00 blue ", mytime);
			lastCreate = (lastCreate + 1) % 5;//按顺序建造 
			new_born = new Warrior;
			new_born->ID = num;
			new_born->element = ielement[warrior];
			new_born->attack = iattack[warrior];
			new_born->life_status = 0;
			new_born->name = warrior;
			new_born->isRed = isRed;
			printf("%s %d born\n", warriorType[warrior], num);
			bool weaponTemp[3] = { false };
			switch (warrior) {
			case ICEMAN:
				weaponTemp[num % 3] = true;
				new_born->trait = 0;
				break;
			case LION: 
				new_born->trait = element;
				printf("Its loyalty is %d\n", element);
				break;
			case NINJA:
				weaponTemp[(num) % 3] = true;
				weaponTemp[(num + 1) % 3] = true;
				break;
			case DRAGON:
				weaponTemp[num % 3] = true;
				new_born->trait = (float)element / ielement[warrior];
				printf("Its morale is %.2f\n", new_born->trait);
				break;
				//default wolf
			}
			new_born->equip(weaponTemp);
			if (isRed)cities[0][0] = new_born;
			else cities[total_cities + 1][1] = new_born;
		}
		else return;
	}
};
Warcraft red(true), blue(false);

void March() {
	for (int i = total_cities; i >= 0; i--) {
		if (i == total_cities && cities[i + 1][0] != NULL && cities[i][0] == NULL)continue;
		cities[i + 1][0] = cities[i][0];
		
	}
	cities[0][0] = NULL;
	for (int i = 0; i <= total_cities; i++) {
		if (i == 0 && cities[i + 1][1] == NULL && cities[i][1] != NULL)continue;
		cities[i][1] = cities[i + 1][1];
	}
	cities[total_cities+1][1] = NULL;
	for (int i = 0; i <= total_cities + 1; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			if (cities[i][j] != NULL) {
				if (cities[i][j]->name == ICEMAN) {
					if (cities[i][j]->trait>0.5) {
						//printf("test:alert!\n");
						cities[i][j] ->element= max(cities[i][j]->element - 9, 1);
						cities[i][j]->attack += 20;
						cities[i][j]->trait = 0;
					}
					else {
						cities[i][j]->trait = 1;
					}
				}
				if (i!=0 &&i!=total_cities+1)
				{
					printf("%03d:10 %s %s %d marched to city %d with %d elements and force %d\n", mytime, j== 0 ? "red" : "blue", warriorType[cities[i][j]->name], cities[i][j]->ID, i, cities[i][j]->element, cities[i][j]->attack);
				}
				if (i == 0&&j==1 && cities[i][j]->life_status==0) {
					printf("%03d:10 blue %s %d reached red headquarter with %d elements and force %d\n", mytime, warriorType[cities[i][j]->name], cities[i][j]->ID, cities[i][j]->element, cities[i][j]->attack);
					blue.occupy++;
					cities[0][1]->life_status = -4;
					//cities[i][j] = NULL;
					if (blue.occupy >= 2)
					{
						blue.win = 1; 
						printf("%03d:10 red headquarter was taken\n",mytime);
					}
				}
				if (i == total_cities + 1 && j == 0 && cities[i][j]->life_status==0) {
					printf("%03d:10 red %s %d reached blue headquarter with %d elements and force %d\n", mytime, warriorType[cities[i][j]->name], cities[i][j]->ID, cities[i][j]->element, cities[i][j]->attack);
					red.occupy++;
					cities[total_cities + 1][0]->life_status = -4;
					//cities[i][j] = NULL;
					if (red.occupy >= 2)
					{
						red.win = 1;
						printf("%03d:10 blue headquarter was taken\n",mytime);
					}
				}

			}
		}
	}

}
void Run() {
	for (int i = 0; i <= total_cities + 1; i++) {
		for (int j = 0; j < 2; j++) {
			if (cities[i][j] != NULL)
			{
				if (cities[i][j]->name == LION && cities[i][j]->trait <= 0)
				{
					if (i == 0 && j == 1)continue;
					if (i == total_cities + 1 && j == 0)continue;
					printf("%03d:05 %s %s %d ran away\n", mytime, j == 0 ? "red" : "blue", warriorType[cities[i][j]->name], cities[i][j]->ID);
					cities[i][j] = NULL;
				}
			}
		}
	}
}
void Shoot(){
	char s[1000]; string s2;
	int top = 0;
	for (int i = 1; i <= total_cities; i++) {
		if (cities[i][0] != NULL) {
			top = 0;
			if (i != total_cities && cities[i + 1][1] != NULL && cities[i][0]->haveweapon[2])
			{
				top += sprintf(s + top, "%03d:35 red %s %d shot", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID);
				cities[i + 1][1]->element -= arrow_attack;
				cities[i][0]->weaponPower[2]--;
				if (!cities[i][0]->weaponPower[2])cities[i][0]->haveweapon[2] = false;
				if (cities[i + 1][1]->element <= 0) {
					cities[i + 1][1]->life_status = -1; top += sprintf(s + top, " and killed blue %s %d", warriorType[cities[i + 1][1]->name], cities[i + 1][1]->ID);
					s[top] = 0;
				}
				finalOutput.insert(make_pair(i, s2 = s));
			}
		}
		if (cities[i][1] != NULL) {
			top = 0;
			
			if (i != 1 && cities[i - 1][0] != NULL && cities[i][1]->haveweapon[2])
			{
				top += sprintf(s + top, "%03d:35 blue %s %d shot", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID);
				cities[i - 1][0]->element -= arrow_attack;
				cities[i][1]->weaponPower[2]--;
				if (!cities[i][1]->weaponPower[2])cities[i][1]->haveweapon[2] = false;
				if (cities[i - 1][0]->element <= 0) {
					cities[i - 1][0]->life_status = -1;
					top += sprintf(s + top, " and killed red %s %d", warriorType[cities[i - 1][0]->name], cities[i - 1][0]->ID);
					s[top] = 0;
				}
				finalOutput.insert(make_pair(i + 0.5, s2 = s));
			}
		}

	}
	output();
}
pair<int, int> virtual_fight(Warrior r, Warrior b, int city);
void Bomb(){
	pair<int, int> explode;
	for (int i = 1; i <= total_cities; i++) {
		if (cities[i][0] != NULL && cities[i][1] != NULL) {
			if (cities[i][0]->life_status == 0 && cities[i][1]->life_status == 0)
			{
				if (cities[i][0]->haveweapon[1] || cities[i][1]->haveweapon[1])
				{
					explode=virtual_fight(*cities[i][0], *cities[i][1], i);
					if (explode.first == false && cities[i][0]->haveweapon[1] || explode.second == false && cities[i][1]->haveweapon[1]) {
						cities[i][0]->life_status = -2;
						cities[i][1]->life_status = -2;
						
						if (explode.first == false)printf("%03d:38 red %s %d used a bomb and killed blue %s %d\n",mytime,warriorType[cities[i][0]->name],cities[i][0]->ID,warriorType[cities[i][1]->name],cities[i][1]->ID);
						if (explode.second == false)printf("%03d:38 blue %s %d used a bomb and killed red %s %d\n", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, warriorType[cities[i][0]->name], cities[i][0]->ID);
						cities[i][0] = NULL;
						cities[i][1] = NULL;
					}
				}
			}
		}
	}
}
pair<int,int> virtual_fight(Warrior r,Warrior b,int city) {
	bool first;
	if (flag[city] == 1) { first = true; }
	else if (flag[city] == -1) { first = false; }
	else if (city % 2 == 1) { first = true; }
	else { first = false; }
	if (first)
	{
		b.element -= r.attack;
		if (r.haveweapon[0]) {
			b.element -= r.weaponPower[0];
			r.weaponPower[0] = r.weaponPower[0] * 8 / 10;
			if (!r.weaponPower[0])r.haveweapon[0] = false;
			
		}
		if (b.element > 0 && b.name != NINJA) {
			r.element -= b.attack / 2;
			if (b.haveweapon[0]) {
				r.element -= b.weaponPower[0];
				b.weaponPower[0] = b.weaponPower[0] * 8 / 10;
				if (!b.weaponPower[0])b.haveweapon[0] = false;
			}
		}
	}
	else {
		r.element -= b.attack;
		if (b.haveweapon[0]) {
			r.element -= b.weaponPower[0];
			b.weaponPower[0] = b.weaponPower[0] * 8 / 10;
			if (!b.weaponPower[0])b.haveweapon[0] = false;
			
		}
		if (r.element > 0 && r.name != NINJA) {
			b.element -= r.attack / 2;
			if (r.haveweapon[0]) {
				b.element -= r.weaponPower[0];
				r.weaponPower[0] = r.weaponPower[0] * 8 / 10;
				if (!r.weaponPower[0])r.haveweapon[0] = false;
			}
		}

	}
	int rr=1, bb=1;
	if (r.element <= 0)rr = 0;
	if (b.element <= 0)bb = 0;
	return make_pair(rr, bb);
}
/*
void win(const int city, const bool isRed) {
	//printf("testing: flag 12:%d,succession12:%d\n", flag[12], succession[12]);
	char s[1000]; string s2;
	int top = 0;

	const int xishu = isRed ? 1 : -1;
	if (succession[city] == xishu)
	{
		succession[city] = 2 * xishu;
		if (flag[city] != xishu)
		{
			flag[city] = xishu;
			top = 0;
			top += sprintf(s + top, "%03d:40 ", mytime);
			if (isRed) top += sprintf(s + top, "red ");
			else top += sprintf(s + top, "blue ");
			top += sprintf(s + top, "flag raised in city %d", city);
			s[top] = 0;
			finalOutput.insert(make_pair(city + 0.65, s2 = s));
		}
	}
	else if (succession[city] != 2 * xishu) succession[city] = xishu;
}
*/
void output() {
	for (itor = finalOutput.begin(); itor != finalOutput.end(); itor++) {
		cout << (*itor).second << endl;
	}
	finalOutput.clear();
}
void win(bool r, bool b, int city);
void Attack(){
	bool red_yell, blue_yell;
	bool red_win, blue_win;
	int rlione, blione;
	char s[1000]; int top = 0; string s2;
	for (int i = 1; i <= total_cities; i++) {
		if (cities[i][0] != NULL && cities[i][1] != NULL)
		{
			red_yell = false; blue_yell = false;
			red_win = false; blue_win = false;
			rlione = blione = 0;
			if (cities[i][0]->life_status == 0 && cities[i][1]->life_status == -1)
			{
				red_win = true; top = 0;
				cities[i][0]->award = true;
				if (flag[i] == 1 || (flag[i] == 0 && i % 2 == 1)) {
					red_yell = 1; 
					if (cities[i][0]->name == DRAGON) {
						cities[i][0]->trait += 0.2;
						if (cities[i][0]->trait > 0.8) {
							top = sprintf(s + top, "%03d:40 red %s %d yelled in city %d", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID, i);
							s[top] = 0;
							finalOutput.insert(make_pair(i + 0.5, s2 = s));
						}
					}
				}
				if (cities[i][0]->name == WOLF) {
					for (int j = 0; j < 3; j++) {
						if (cities[i][0]->haveweapon[j] == false && cities[i][1]->haveweapon[j]==true) {
							cities[i][0]->haveweapon[j] = true;
							cities[i][0]->weaponPower[j] = cities[i][1]->weaponPower[j];
						}
					}
				}
				win(true, false, i);
				//win(i, true);
				//if (flag[i] != 1) {
					//win(red_win, blue_win,i);
					
				//}
				cities[i][1] = NULL;
			}
			else if (cities[i][0]->life_status == -1 && cities[i][1]->life_status == -1) {
				//win(red_win, blue_win, i);
				cities[i][0] = NULL;
				cities[i][1] = NULL;
			}
			else if (cities[i][0]->life_status == -1 && cities[i][1]->life_status == 0) {
				blue_win = true; top = 0;
				cities[i][1]->award = true;
				if (flag[i] == -1 || (flag[i] == 0 && i % 2 == 0)) { blue_yell = 1; 
				if (cities[i][1]->name == DRAGON) {
					cities[i][1]->trait += 0.2;
					if (cities[i][1]->trait > 0.8) {
						top += sprintf(s + top, "%03d:40 blue %s %d yelled in city %d", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, i);
						s[top] = 0;
						finalOutput.insert(make_pair(i + 0.5, s2 = s));
					}
				}
				}
				if (cities[i][1]->name == WOLF) {
					for (int j = 0; j < 3; j++) {
						if (cities[i][1]->haveweapon[j] == false && cities[i][0]->haveweapon[j] == true) {
							cities[i][1]->haveweapon[j] = true;
							cities[i][1]->weaponPower[j] = cities[i][0]->weaponPower[j];
						}
					}
				}
				win(false, true, i);
				//win(i, false);
				//if (flag[i] != -1) { 
					
					//win(red_win, blue_win, i); 
				//}
				cities[i][0] = NULL;
			}
			else if (cities[i][0]->life_status == 0 && cities[i][1]->life_status == 0)
			{
				Warrior* b = cities[i][1];
				Warrior* r = cities[i][0];
				if (b->name == LION)blione = cities[i][1]->element;
				if (r->name == LION)rlione = cities[i][0]->element;
				bool first;
				if (flag[i] == 1) { first = true; }
				else if (flag[i] == -1) { first = false; }
				else if (i % 2 == 1) { first = true; }
				else { first = false; }
				if (first)
				{
					top = 0;
					red_yell = true;
					b->element -= r->attack;
					top+=sprintf(s+top,"%03d:40 red %s %d attacked blue %s %d in city %d with %d elements and force %d", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID, warriorType[cities[i][1]->name], cities[i][1]->ID, i, cities[i][0]->element, cities[i][0]->attack);
					s[top] = 0;
					finalOutput.insert(make_pair(i, s2 = s));
					if (r->haveweapon[0]) {
						b->element -= r->weaponPower[0];
						r->weaponPower[0] = r->weaponPower[0] * 8 / 10;
						if (!r->weaponPower[0])r->haveweapon[0] = false;
						
						
					}
					if (b->element > 0 && b->name != NINJA) {
						r->element -= b->attack / 2;
						if (b->haveweapon[0]) {
							r->element -= b->weaponPower[0];
							b->weaponPower[0] = b->weaponPower[0] * 8 / 10;
							if (!b->weaponPower[0])b->haveweapon[0] = false;
						}
						top = 0;
						top+=sprintf(s+top,"%03d:40 blue %s %d fought back against red %s %d in city %d", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, warriorType[cities[i][0]->name], cities[i][0]->ID, i);
						s[top] = 0;
						finalOutput.insert(make_pair(i+0.1, s2 = s));
					}
				}
				else {
					blue_yell = true;
					r->element -= b->attack;
					top = 0;
					top+=sprintf(s+top,"%03d:40 blue %s %d attacked red %s %d in city %d with %d elements and force %d", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, warriorType[cities[i][0]->name], cities[i][0]->ID, i, cities[i][1]->element, cities[i][1]->attack);
					s[top] = 0;
					finalOutput.insert(make_pair(i, s2 = s));
					if (b->haveweapon[0]) {
						r->element -= b->weaponPower[0];
						b->weaponPower[0] = b->weaponPower[0] * 8 / 10;
						if (!b->weaponPower[0])b->haveweapon[0] = false;
						
						
					}
					if (r->element > 0 && r->name != NINJA) {
						b->element -= r->attack / 2;
						if (r->haveweapon[0]) {
							b->element -= r->weaponPower[0];
							r->weaponPower[0] = r->weaponPower[0] * 8 / 10;
							if (!r->weaponPower[0])r->haveweapon[0] = false;
						}
						top = 0;
						top+=sprintf(s+top,"%03d:40 red %s %d fought back against blue %s %d in city %d", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID, warriorType[cities[i][1]->name], cities[i][1]->ID, i);
						s[top] = 0;
						finalOutput.insert(make_pair(i+0.1, s2 = s));
					}

				}
				if (blue_yell && b->name==DRAGON) {
					if (r->element <= 0 && b->element > 0)b->trait += 0.2;
					else b->trait -= 0.2;
					if (b->trait > 0.8 && b->element>0) {
						top = 0;
						top += sprintf(s + top, "%03d:40 blue %s %d yelled in city %d", mytime, warriorType[b->name], b->ID, i);
						s[top] = 0;
						finalOutput.insert(make_pair(i + 0.5, s2 = s));
					}
				}
				if ( b->name == LION) {
					if (!(r->element <= 0 && b->element > 0))b->trait -= subLoyalty;
					
				}
				if (red_yell && r->name == DRAGON) {
					if (r->element > 0 && b->element <= 0)r->trait += 0.2;
					else b->trait -= 0.2;
					if (r->trait > 0.8 && r->element > 0) {
						top = 0;
						top += sprintf(s + top, "%03d:40 red %s %d yelled in city %d", mytime, warriorType[r->name], r->ID, i);
						finalOutput.insert(make_pair(i + 0.49, s2 = s));
					}
				}
				if ( r->name == LION) {
					if (!(r->element > 0 && b->element <= 0))r->trait -= subLoyalty;
				}
				if (r->element <= 0)
				{
					top = 0;
					top+=sprintf(s+top,"%03d:40 red %s %d was killed in city %d", mytime,warriorType[cities[i][0]->name], cities[i][0]->ID, i);
					s[top] = 0;
					finalOutput.insert(make_pair(i+0.2, s2 = s));
					r->life_status = -3;
					
					if (b->element > 0) {
						blue_win = true; b->award = 1;
						b->element += rlione;
					}
					
					//if (flag[i] != -1)win(red_win, blue_win, i);
					if (blue_win) {
						if (cities[i][1]->name == WOLF) {
							for (int j = 0; j < 3; j++) {
								if (cities[i][1]->haveweapon[j] == false && cities[i][0]->haveweapon[j] == true) {
									cities[i][1]->haveweapon[j] = true;
									cities[i][1]->weaponPower[j] = cities[i][0]->weaponPower[j];
								}
							}
						}
						
					}
					cities[i][0] = NULL;
				}
				if (b->element <= 0)
				{
					top = 0;
					top += sprintf(s + top, "%03d:40 blue %s %d was killed in city %d", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, i);
					s[top] = 0;
					finalOutput.insert(make_pair(i + 0.3, s2 = s));
					b->life_status = -3;
					if (r->element > 0) {
						red_win = true; r->award = 1;
						r->element += blione;
					}
					if (red_win) {
						if (cities[i][0]->name == WOLF) {
							for (int j = 0; j < 3; j++) {
								if (cities[i][0]->haveweapon[j] == false && cities[i][1]->haveweapon[j] == true) {
									cities[i][0]->haveweapon[j] = true;
									cities[i][0]->weaponPower[j] = cities[i][1]->weaponPower[j];
								}
							}
						}
						
					}
					cities[i][1] = NULL;
				}
				//win(red_win, blue_win, i);
				if (red_win)win(true, false, i);// win(i, true);
				if (blue_win)win(false, true, i);// win(i, false);
				if (red_win == false && blue_win == false)win(false, false, i);// succession[i] = 0;
			}
		}
		else if (cities[i][0]!=NULL)
		{
		if(cities[i][0]->life_status<0)
		cities[i][0]=NULL;
		}
		else if (cities[i][1] != NULL) {
		if (cities[i][1]->life_status < 0)cities[i][1] = NULL;
		}
	}
	for (int i = 1; i <= total_cities; i++) {
		
		if (cities[i][0] == NULL && cities[i][1] != NULL) {
			if (blue.element >= 8 && cities[i][1]->award) {
				blue.element -= 8;
				cities[i][1]->element += 8;
				cities[i][1]->award = 0;
			}
		}
	}
	for (int i = total_cities; i >= 1; i--) {
		if (cities[i][0] != NULL && cities[i][1] == NULL) {
			if (red.element >= 8 && cities[i][0]->award) {
				red.element -= 8;
				cities[i][0]->element += 8;
				cities[i][0]->award = 0;
			}
		}
	}
	for (int i = 1; i <= total_cities; i++) {
		if (cities[i][0] != NULL && cities[i][1] == NULL) {
			if (element[i]) {
				top = 0;
				top+=sprintf(s+top,"%03d:40 red %s %d earned %d elements for his headquarter", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID, element[i]);
				s[top] = 0;
				finalOutput.insert(make_pair(i + 0.6, s2 = s));
				red.element += element[i];
				element[i] = 0;
			}
		}
		if (cities[i][0] == NULL && cities[i][1] != NULL) {
			if (element[i]) {
				top = 0;
				top+=sprintf(s+top,"%03d:40 blue %s %d earned %d elements for his headquarter", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID, element[i]);
				s[top] = 0;
				finalOutput.insert(make_pair(i + 0.6, s2 = s));
				blue.element += element[i];
				element[i] = 0;
			}
		}
	}
	output();//旗帜
}//主动进攻，反击，战死，欢呼，获取生命元，插旗

void report_h() {
	printf("%03d:50 %d elements in red headquarter\n",mytime, red.element);
	printf("%03d:50 %d elements in blue headquarter\n", mytime,blue.element);

}
void report_w() {
	char s[1000]; string s2;
	int top = 0;
	bool Output;
	for (int i = 0; i <= total_cities+1; i++) {
		if (cities[i][0] != NULL) {
			top = 0; Output = false;
			top += sprintf(s + top, "%03d:55 red %s %d has ", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID);
			for (int j = 2; j >= 0; j--) {
				if (cities[i][0]->haveweapon[j]) {
					if (Output) top += sprintf(s + top, ",");
					else Output = true;
					switch (j)
					{
					case ARROW:
						top += sprintf(s + top, "arrow(%d)", cities[i][0]->weaponPower[j]); break;
					case BOMB:
						top += sprintf(s + top, "bomb"); break;
					default:
						top += sprintf(s + top, "sword(%d)", cities[i][0]->weaponPower[j]);
					}
				}
			}
			if (!Output) top += sprintf(s + top, "no weapon");
			s[top] = 0;
			finalOutput.insert(make_pair(i, s2 = s));
		}
	}
	output();
	for (int i = 0; i <= total_cities+1; i++) {
		if (cities[i][1] != NULL) {
			top = 0; Output = false;
			top += sprintf(s + top, "%03d:55 blue %s %d has ", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID);
			for (int j = 2; j >= 0; j--) {
				if (cities[i][1]->haveweapon[j]) {
					if (Output) top += sprintf(s + top, ",");
					else Output = true;
					switch (j)
					{
					case ARROW:
						top += sprintf(s + top, "arrow(%d)", cities[i][1]->weaponPower[j]); break;
					case BOMB:
						top += sprintf(s + top, "bomb"); break;
					default:
						top += sprintf(s + top, "sword(%d)", cities[i][1]->weaponPower[j]);
					}
				}
			}
			if (!Output) top += sprintf(s + top, "no weapon");
			//top += sprintf(s + top, "\n");
			s[top] = 0;
			finalOutput.insert(make_pair(i+0.5, s2 = s));
		}
	}
	output();
}


void win(bool r, bool b,int city) {
	//printf("testing win:flag17:%d\n", flag[17]);
	if (r == true && flag[city] == 1) { succession[city] = 2; return; }
	if (b == true && flag[city] == -1) { succession[city] = -2; return; }
	if (r == true && flag[city]!= 1) {
		if (succession[city] == 1)
		{
			flag[city] = 1;
			char s[200];
			int top = 0;
			top += sprintf(s + top, "%03d:40 red flag raised in city %d", mytime, city);
			s[top] = 0;
			string s2;
			finalOutput.insert(make_pair(city + 0.8, s2 = s));
		}
		else succession[city] = 1;
		return;
	}
	if (b == true && flag[city] !=-1) {
		if (succession[city] == -1) {
			flag[city] = -1;
			char s[200];
			int top = 0;
			top += sprintf(s + top, "%03d:40 blue flag raised in city %d", mytime, city);
			s[top] = 0;
			string s2;
			finalOutput.insert(make_pair(city + 0.8, s2 = s));
		}
		succession[city] = -1;
		return;
	}
	if (b == false && r == false) { succession[city] = 0; return; }
	
	
}

int main() {
	int cases;
	int cur_case=1;
	scanf("%d", &cases);
	for (; cur_case <= cases; cur_case++)
	{
		mytime = 0;
		
		printf("Case %d:\n", cur_case);
		scanf("%d %d %d %d %d", &total_element, &total_cities,&arrow_attack,&subLoyalty,&total_time);
		
		for (int i = 0; i < 5; i++) {
			scanf("%d", &ielement[i]);
		}
		for (int i = 0; i < 5; i++) {
			scanf("%d", &iattack[i]);
		}
		for (int i = 0; i < 22; i++) {
			flag[i] = succession[i] = element[i] = 0;
		}
		cities = new Warrior * *[total_cities + 2];
		for (int i = 0; i <= total_cities + 1; i++)
		{
			cities[i] = new Warrior * [2];
			cities[i][0] = NULL;
			cities[i][1] = NULL;
		}
		red.renew(); blue.renew();
		red.element = total_element; blue.element = total_element;
		//printf("test:total time:%d\n ",total_time);
		while (blue.occupy<2 && red.occupy<2) {
			if (mytime * 60 <= total_time) {
				red.create();
				blue.create();
			}
			else break;
			if (mytime * 60 + 5 <= total_time) {
				Run();
			}
			if (mytime * 60 + 10 <= total_time) {
				March();
				//printf("test:%d\n", cities[1][0] == NULL);
				//Win();
			}
			if (blue.win || red.win) { break; }
			if (mytime * 60 + 20 <= total_time) {
				for (int i = 1; i <= total_cities; i++)
				{
					element[i] += 10;//产生生命元
				}
			}
			if (mytime * 60 + 30 <= total_time) {
				//printf("test:here!\n");
				for (int i = 1; i <= total_cities; i++) {
					if (cities[i][0] != NULL && cities[i][1] == NULL)
					{
						red.element += element[i];
						if (element[i])printf("%03d:30 red %s %d earned %d elements for his headquarter\n", mytime, warriorType[cities[i][0]->name], cities[i][0]->ID,element[i]);
						element[i] = 0;
					}
					if (cities[i][0] == NULL && cities[i][1] != NULL)
					{
						blue.element += element[i];
						if (element[i])printf("%03d:30 blue %s %d earned %d elements for his headquarter\n", mytime, warriorType[cities[i][1]->name], cities[i][1]->ID,element[i]);
						element[i] = 0;
					}
				}
			}
			
			if (mytime * 60 + 35 <= total_time) {
				Shoot();
			}
			if (mytime * 60 + 38 <= total_time) {
				Bomb();
			}
			if (mytime * 60 + 40 <= total_time) {
				Attack();
			}
			if (mytime * 60 + 50 <= total_time) {
				report_h();
			}
			if (mytime * 60 + 55 <= total_time) {
				report_w();
			}
			mytime++;
		}
	}
}
